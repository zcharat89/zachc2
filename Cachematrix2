## CacheMatrix Assignment Version 1.1

## NOTES FROM VERSION 1.0 (score 9/12): Andrea Sucre Gonz√°lez:
## "Almost there. The second function does not handle the situation if the inverse is already calculated and stored in cache (-2 points). 
## Your explanatory comments are lacking (-1 point). The other observation I have is that in future works use semantic names for the variables." 

## VERSION 1.1 CHANGE LOG AND STUDENT COMMENTS
## Version 1.1 addresses the brevity of the comments in the first version  and provides context to what this code is intended for. 
## Unfortunately, I will be without any internet access until the course deadline; and will not be able to address the other issue until afterwards.

## OVERALL PURPOSE
## The overall purpose of the interoperability between functions makeCacheMatrix and CacheSolve is 1) to create a cached version of a matrix,
## and 2) to be able to invert it. This code could be useful if the matrix to be evaluated is sufficiently large/complex to require substantial
## computational resources to run, or if data analysis would benefit from a "static snapshot" that a cache provides.

## The first function, makeCacheMatrix, creates a cached version of a matrix, (but not the original matrix itself). 

makeCacheMatrix <- function(x = matrix()) {
    Z = NULL
    set = function(y) {
        x <<- y
        Z <<- NULL
}
    get = function() x
    setInverse = function(solve) Z <<- solve
    getInverse = function() Z
    list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}


## The function cacheSolve computes the inverse of the cached matrix produced from makeCacheMatrix function which
## utilizes the 'solve' function. 
## Note: this function does not handle the situation where the inverse is already calculated and stored in cache.


cacheSolve <- function(x, ...) {
    Z = x$getInverse()
    Q <- x$get()
    Z = solve(Q, ...)
    x$setInverse(Z)
    Z
  
}

